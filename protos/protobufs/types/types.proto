syntax = "proto3";
package tendermint.types;

option go_package = "github.com/hyperledger/fabric-droplib/protos/protobufs/types";
import "gogoproto/gogo.proto";
//import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/hyperledger/fabric-droplib/protos/protobufs/crypto/proof.proto";
import "google/protobuf/timestamp.proto";
//import "github.com/hyperledger/fabric/protos/common/common.proto";
import "github.com/hyperledger/fabric-droplib/protos/protobufs/types/validator.proto";
import "github.com/hyperledger/fabric-droplib/protos/libs/bits/types.proto";

enum SignedMsgType{
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix) = false;
  SIGNED_MSG_TYPE_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "UnknownType"];
  // Votes
  SIGNED_MSG_TYPE_PREVOTE = 1 [(gogoproto.enumvalue_customname) = "PrevoteType"];
  SIGNED_MSG_TYPE_PRECOMMIT = 2 [(gogoproto.enumvalue_customname) = "PrecommitType"];

  // Proposals
  SIGNED_MSG_TYPE_PROPOSAL = 32 [(gogoproto.enumvalue_customname) = "ProposalType"];
}

// PartsetHeader
message PartSetHeaderProto {
  uint32 total = 1;
  bytes  hash = 2;
}


message PartProto {
  uint32                  index = 1;
  bytes                   bytes = 2;
  tendermint.crypto.ProofProto proof = 3 [(gogoproto.nullable) = false];
}

// BlockID
message BlockIDProto {
  bytes         hash = 1;
  PartSetHeaderProto part_set_header = 2 [(gogoproto.nullable) = false];
}

// Vote represents a prevote, precommit, or commit vote from validators for
// consensus.
message VoteProto {
  SignedMsgType type = 1;
  int64         height = 2;
  int32         round = 3;
  BlockIDProto       block_id = 4
  [(gogoproto.nullable) = false, (gogoproto.customname) = "BlockID"];  // zero if vote is nil.
  google.protobuf.Timestamp timestamp = 5
  [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  bytes validator_address = 6;
  int32 validator_index = 7;
  bytes signature = 8;
}


message NewValidBlockProto {
  int64                          height                = 1;
  int32                          round                 = 2;
  PartSetHeaderProto block_part_set_header = 3 [(gogoproto.nullable) = false];
  tendermint.libs.bits.BitArrayProto  block_parts           = 4;
  bool                           is_commit             = 5;
}
message VoteSetMaj23Proto {
  int64                          height   = 1;
  int32                          round    = 2;
  SignedMsgType type     = 3;
  BlockIDProto       block_id = 4 [(gogoproto.customname) = "BlockID", (gogoproto.nullable) = false];
}
/////

// BlockIdFlag indicates which BlcokID the signature is for
enum BlockIDFlagProto {
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix) = false;

  BLOCK_ID_FLAG_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "BlockIDFlagUnknown"];
  BLOCK_ID_FLAG_ABSENT = 1 [(gogoproto.enumvalue_customname) = "BlockIDFlagAbsent"];
  BLOCK_ID_FLAG_COMMIT = 2 [(gogoproto.enumvalue_customname) = "BlockIDFlagCommit"];
  BLOCK_ID_FLAG_NIL = 3 [(gogoproto.enumvalue_customname) = "BlockIDFlagNil"];
}
// CommitSig is a part of the Vote included in a Commit.
message CommitSigProto {
  BlockIDFlagProto               block_id_flag = 1;
  bytes                     validator_address = 2;
  google.protobuf.Timestamp timestamp = 3
  [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  bytes signature = 4;
}

// Commit contains the evidence that a block was committed by a set of validators.
message CommitProto {
  int64              height = 1;
  int32              round = 2;
  BlockIDProto            block_id = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "BlockID"];
  repeated CommitSigProto signatures = 4 [(gogoproto.nullable) = false];
}
// NewRoundStep is sent for every step taken in the ConsensusState.
// For every height/round/step transition
message NewRoundStepProto {
  int64  height = 1;
  int32  round = 2;
  uint32 step = 3;
  int64  seconds_since_start_time = 4;
  int32  last_commit_round = 5;
}

// HasVote is sent to indicate that a particular vote has been received.
message HasVoteProto {
  int64                          height = 1;
  int32                          round = 2;
  SignedMsgType type = 3;
  int32                          index = 4;
}
// Data contains the set of transactions included in the block
message TendermintBlockDataProto {
  // Txs that will be applied by state @ block.Height+1.
  // NOTE: not all txs here are valid.  We're just agreeing on the order first.
  // This means that block.AppHash does not include these txs.
  repeated bytes txs = 1;
}
// Header defines the structure of a Tendermint block header.
message TendermintBlockHeaderProto {
  // basic block info
  //  tendermint.version.Consensus version  = 1 [(gogoproto.nullable) = false];
  string                       chain_id = 2 [(gogoproto.customname) = "ChainID"];
  int64                        height = 3;
  google.protobuf.Timestamp    time = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // prev block info
  BlockIDProto last_block_id = 5 [(gogoproto.nullable) = false];

  // hashes of block data
  bytes last_commit_hash = 6;  // commit from validators from the last block
  bytes data_hash = 7;  // transactions

  // hashes from the app output from the prev block
  bytes validators_hash = 8;   // validators for the current block
  bytes next_validators_hash = 9;   // validators for the next block
  bytes consensus_hash = 10;  // consensus params for current block
  bytes app_hash = 11;  // state after txs from the previous block
  bytes last_results_hash = 12;  // root hash of all results from the txs from the previous block

  // consensus info
  bytes evidence_hash = 13;  // evidence included in the block
  bytes proposer_address = 14;  // original proposer of the block
}

message ProposalProto {
  SignedMsgType             type = 1;
  int64                     height = 2;
  int32                     round = 3;
  int32                     pol_round = 4;
  BlockIDProto                   block_id = 5 [(gogoproto.customname) = "BlockID", (gogoproto.nullable) = false];
  google.protobuf.Timestamp timestamp = 6
  [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  bytes signature = 7;
}




message BlockMetaProto {
  BlockIDProto block_id = 1 [(gogoproto.customname) = "BlockID", (gogoproto.nullable) = false];
  int64   block_size = 2;
  TendermintBlockHeaderProto  header = 3 [(gogoproto.nullable) = false];
  int64   num_txs = 4;
}


message SignedHeaderProto {
  TendermintBlockHeaderProto header = 1;
  CommitProto commit = 2;
}

message LightBlockProto {
  SignedHeaderProto                  signed_header = 1;
  tendermint.types.ValidatorSetProto validator_set = 2;
}

// TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
message TxProofProto {
  bytes                   root_hash = 1;
  bytes                   data      = 2;
  tendermint.crypto.ProofProto proof     = 3;
}